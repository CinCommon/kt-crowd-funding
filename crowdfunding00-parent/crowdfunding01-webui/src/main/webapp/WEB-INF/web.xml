<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         version="2.5">
  <display-name>crowdfunding01-webui</display-name>
  <welcome-file-list>
    <welcome-file>/login-check.html</welcome-file>
  </welcome-file-list>
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:spring-persist-*.xml</param-value>
  </context-param>
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <filter>
    <filter-name>CharacterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <!-- 设置字符集 -->
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceRequestEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <param-name>forceResponseEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <!-- 这个Filter执行的顺序要在所有其他的Filter前面 -->
  <filter-mapping>
    <filter-name>CharacterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <servlet>
    <servlet-name>springDispatcherServlet</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:spring-web-mvc.xml</param-value>
    </init-param>
    <!-- Servlet默认生命周期中创建对象是在第一次接受到请求时, 而DispatcherServlet创建对象后有大量的SpringMVC框架初始化的操作, 不适合在第一次请求的时候做, 设置load-on-startup是为了让DispatherServlet在Web容器启动时创建对象+初始化 -->
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>springDispatcherServlet</servlet-name>
    <!-- 下面这种配置: 拦截所有请求 -->
    <!-- <url-pattern>/</url-pattern>-->
    <!-- 下面这种配置方式只有.html文件归SpringMVC管, 其他的静态资源文件不走SpringMVC, 也就是不需要特殊处理 -->
    <!-- 这种方式可以实现伪静态效果, 看起来时访问一个html页面, 实际上通过服务器端的Java代码处理后生成的动态网页 -->
    <!-- 优点1: .css, .js, .png这些文件不需要特殊处理, 因为不会经过SpringMVC了 -->
    <!-- 优点2: 利于SEO -->
    <!-- 缺点: 不符合RESTFul风格 -->
    <url-pattern>*.html</url-pattern>
    <!-- 部分ajax请求需要使用json数据进行交互, 所以拦截两种后缀名, 进行区分 -->
    <url-pattern>*.json</url-pattern>
  </servlet-mapping>
</web-app>
